name: webticket-fullstack

services:
  # Nginx Proxy
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - webticket-network

  # Frontend Service
  frontend:
    container_name: frontend-app
    image: vinhdn20/webticket-frontend:latest
    build:
      context: ./FE
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=/api
    # ports:
    #   - "3000:80"
    depends_on:
      - backend
    networks:
      - webticket-network

  # Backend API Service
  backend:
    container_name: backend-api
    image: vinhdn20/webticket-backend:latest
    build:
      context: ./BE/WebTicket
      dockerfile: WebTicket/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    # ports:
    #   - "5000:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - webticket-network

  # PostgreSQL Database
  postgres:
    container_name: webticket-postgres
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=webticket
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - webticket-network

volumes:
  postgres-data:

networks:
  webticket-network:
    driver: bridge